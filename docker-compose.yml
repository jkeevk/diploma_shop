services:
  app:
    env_file:
      - .env
    build: .
    depends_on:
      - db
      - redis
    expose:
      - "8000"
    links:
      - db
      - redis
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      REDIS_URL: ${REDIS_URL}
      DJANGO_SETTINGS_MODULE: "orders.settings"
      PYTHONPATH: "/app"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      retries: 5
    restart: on-failure
    ports:
      - "8000:8000"
    networks:
      - net
    volumes:
      - ./data/:/app/data/
      - ./coverage:/app/coverage
    command: >
      bash -c "
        while ! nc -z db 5432; do
          echo 'Waiting for PostgreSQL to be ready...'
          sleep 2
        done &&
        python manage.py makemigrations backend &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python scripts/create_superuser.py

        uvicorn orders.asgi:application --host 0.0.0.0 --port 8000
      "

  db:
    env_file:
      - .env
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - net
    ports:
      - "5431:5432"
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - net
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  celery:
    build: .
    command: celery -A backend.celery_app worker --loglevel=info
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=orders.settings
      - PYTHONPATH=/diploma_shop/
    depends_on:
      - db
      - redis
    volumes:
      - ./data/:/app/data/
    restart: on-failure
    networks:
      - net

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/staticfiles
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - net
    restart: unless-stopped
    command: ["/bin/bash", "-c", "nginx -g 'daemon off;'"]

  tests:
    build: .
    env_file:
      - .env
    command: >
      bash -c "
        echo '=== WAITING FOR DATABASE ==='
        while ! nc -z db 5432; do sleep 2; done
        
        echo '=== APPLYING MIGRATIONS ==='
        python manage.py makemigrations backend &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput

        echo '=== RUNNING TESTS ==='
        pytest --cov=backend --cov-report=xml:/app/coverage/coverage.xml
        "
    depends_on:
      - app
      - db
    volumes:
      - ./coverage:/app/coverage
    networks:
      - net

networks:
  net:
    driver: bridge
