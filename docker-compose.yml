services:
  app:
    env_file: .env
    build:
      context: .
      args:
        PYTHON_VERSION: 3.12
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: orders.settings
      PYTHONPATH: /app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - net
    volumes:
      - ./data/:/app/data/
      - ./coverage:/app/coverage
    command: >
      bash -c "
        echo 'Waiting for PostgreSQL...'
        while ! nc -z db 5432; do sleep 2; done

        echo 'Running migrations...'
        python manage.py makemigrations --no-input backend &&
        python manage.py migrate --no-input &&

        echo 'Collecting static files...'
        python manage.py collectstatic --no-input --clear &&

        echo 'Creating superuser...'
        python scripts/create_superuser.py &&

        echo 'Starting Gunicorn...'
        gunicorn orders.wsgi:application --bind 0.0.0.0:8000 --workers 4
      "
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:17-alpine
    env_file: .env
    networks:
      - net
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    ports:
      - "5431:5432"

  redis:
    image: redis:7-alpine
    networks:
      - net
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    ports:
      - "6379:6379"

  celery:
    build: .
    command: celery -A backend.celery_app worker --loglevel=info
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: orders.settings
      PYTHONPATH: /app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data/:/app/data/
    networks:
      - net
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A backend.celery_app status | grep -q '1 node online'",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - app
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/staticfiles
      - ./media:/media
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - net
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 20s
      timeout: 5s
      retries: 3
  tests:
    build: .
    env_file: .env
    command: >
      bash -c "
        echo '=== WAITING FOR DATABASE ==='
        while ! nc -z db 5432; do sleep 2; done
        
        echo '=== APPLYING MIGRATIONS ==='
        python manage.py makemigrations backend &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput

        echo '=== RUNNING TESTS ==='
        pytest --cov=backend --cov-report=xml:/app/coverage/coverage.xml
      "
    depends_on:
      app:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./coverage:/app/coverage
    networks:
      - net

networks:
  net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
